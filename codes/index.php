<?php
    declare(strict_types=1); // ativando tipagem expl√≠cita
    include_once 'tipo_dados.php';
    include_once 'phpdoc.php';
    include_once 'filtros.php';

    $resultado = somarinteiros(3000, 5000);
    $comentario = "Ent√£o Morty, voc√™ n√£o vai conseguir ver esse coment√°rio por inteiro porque a fun√ß√£o reduzirTexto n√£o vai deixar, fiz isso porque voc√™ n√£o gosta de explica√ß√µes prolongadas..."; 
    // $comentario = 10 //para fazer o teste;    
?>
<DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8"> <!-- Define a codifica√ß√£o de caracteres para dar suporte ao pt-br -->
        <meta name="viewport" content="width=device-width, initial-scale=1.0"> <!-- Deixa responsivo em mobile -->
        <meta http-equiv="X-UA-Compatible" content="IE=edge"> <!-- For√ßa compatibilidade Edge no IE -->
    </head>
   <body>        
        <img src = "/Studying_PHP/img/Rick_Picles.jpg" width="150" height="200">
        <h3>EU VIREI UM PICLES MORTY</h3>
        <img src = "/Studying_PHP/img/Morty_Rick.png" width="200" height="200"/>
        <h3>Morty essa P√°gina foi criada para podermos brincar com fun√ß√µes e tipo de dados em PHP</h3>
        <p>CLIQUE AQUI MORTY! PARA TER ACESSO AS INFORMA√á√ïES DO SERVER:<a href = 'http://localhost/Studying_PHP/codes/infoServer.php'>CLIQUE AQUI<a></p>
        <p>URL_PRODUCAO do nosso site definida por uma constante: <a href="<?=URL_PRODUCAO?>">Clique aqui</a> , N√£o esqeu√ßa de olhar bem a URL</p>
        <p>Morty o Resultado da soma da fun√ß√£o importada do arquivo tipo_dado √©: <b><?= $resultado ?></b></p>
        <p><?= is_int($comentario); ?></p>
        <p><?= reduzirTexto($comentario); ?></p>
        <p><?= funcaoQualquer(); ?></p>
        <p>Testando essa fun√ß√£o com o operador tern√°rio, o valor l√≥gico (tabela l√≥gica) do resultado √©: <?=funcaoOperadorTernario()?></p><br>
        <p>Esse Short Open Tag √© muito bom Morty! Saca S√≥:<br><?= formatar_value()?><br>Acima est√° um n√∫mero Padr√£o formatado pela nossa fun√ß√£o number_format</p>
        <br>
        <p><?=formartar_number()?></p>
        <!--<p><#?= fusioHorarioPadr√£o()?></p>-->
        <p><?=contarTempo('2025-07-14 17:59:0')?></p>
        <p>Esse email √© v√°lido? Se retornar 1, sim, se retornar 0 √© inv√°lido, O RESULTADO √â: <?=validarEmail("guix1delas@gmail.com")?> </p>
        <p>Esse url √© v√°lida? Se retornar 1, sim, se retornar 0 √© inv√°lido, O RESULTADO √â: <?=validarUrl("https://localhost:8080/admin")?> </p>
        <p>Realizando Teste do nosso Validador de URL Personalizado com a CONSTANTE definida por padr√£o: <?=var_dump(validarUrlPersonalizada())?> </p>
    </body>
</html>

<?php
/* 
    1Ô∏è‚É£ declare(strict_types=1); ativa a tipagem estrita e s√≥ funciona se for a PRIMEIRA instru√ß√£o do arquivo.
    2Ô∏è‚É£ Nada pode vir antes dela: nem espa√ßo fora da tag <?php, nem HTML, nem coment√°rios soltos.
    3Ô∏è‚É£ Se o PHP ler qualquer caractere fora da tag <?php antes, ele j√° manda conte√∫do pro navegador ‚Üí trava o declare.
    4Ô∏è‚É£ Por isso, o bloco <?php declare(strict_types=1); precisa ser o PRIMEIRO a rodar, antes de tudo.
    5Ô∏è‚É£ Depois do declare e includes, voc√™ pode fechar ?> e abrir HTML normalmente.
    6Ô∏è‚É£ Assim o PHP configura o motor para exigir tipos exatos antes de gerar qualquer sa√≠da.
    7Ô∏è‚É£ Se misturar HTML antes, o interpretador j√° est√° enviando bytes para o cliente ‚Üí e o declare n√£o tem mais efeito.
    8Ô∏è‚É£ Para projetos modernos, √© boa pr√°tica separar l√≥gica PHP no topo e visual depois, ou usar templates (Twig, Blade).
    9Ô∏è‚É£ Exemplo padr√£o: <?php declare(strict_types=1); include ... ?> <!DOCTYPE html>....
    üîü Seguindo isso, voc√™ garante coer√ß√£o forte e sem erros silenciosos de tipo.
*/
?>